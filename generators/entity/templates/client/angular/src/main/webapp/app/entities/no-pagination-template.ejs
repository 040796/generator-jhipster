<%_
var i18nToLoad = [entityInstance];
for (var idx in fields) {
    if (fields[idx].fieldIsEnum == true) {
        i18nToLoad.push(fields[idx].enumInstance);
    }
}
_%>
<%= entityInstancePlural %>: <%= entityClass %>[];
    currentAccount: any;
    searchQuery: any;
    <%_ if (fieldsContainBlob) { _%>
    byteSize: any;
    openFile: any;
    <%_ } _%>

    constructor(
        <%_ if (enableTranslation) { _%>
        private jhiLanguageService: JhiLanguageService,
        <%_ } _%>
        private <%= entityInstance %>Service: <%= entityClass %>Service,
        private alertService: AlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: DataUtils,
        <%_ } _%>
        private eventManager: EventManager,
        private principal: Principal
    ) {
        <%_ if (fieldsContainBlob) { _%>
        this.openFile = dataUtils.openFile;
        this.byteSize = dataUtils.byteSize;
        <%_ } _%>
        <%_ if (enableTranslation) { _%>
        this.jhiLanguageService.setLocations(<%- toArrayString(i18nToLoad) %>);
        <%_ } _%>
    }

    loadAll() {
        this.<%= entityInstance %>Service.query().subscribe(
            (res: Response) => {
                this.<%= entityInstancePlural %> = res.json();
                this.searchQuery = null;
            },
            (res: Response) => this.onError(res.json())
        );
    }
    <%_ if (searchEngine == 'elasticsearch') { _%>

    search() {
        if (!this.searchQuery) {
            return this.loadAll();
        }
        <%= entityClass %>Search.query({query: this.searchQuery}).subscribe(
            (res: Response) => {
                this.<%= entityInstancePlural %> = res.json();
                this.currentSearch = this.searchQuery;
            },
            (res: Response) => this.onError(res.json())
        );
    }

    clear() {
        this.searchQuery = null;
        this.loadAll();
    }
    <%_ } _%>
