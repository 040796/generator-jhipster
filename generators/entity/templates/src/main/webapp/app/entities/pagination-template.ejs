        $scope.predicate = pagingParams.predicate;
        $scope.reverse = pagingParams.ascending;
        <%_ if (fieldsContainBlob) { _%>
        $scope.abbreviate = DataUtils.abbreviate;
        $scope.byteSize = DataUtils.byteSize;
        <%_ } _%>
        $scope.loadAll = function() {
            var onSuccess = function (data, headers) {
                $scope.links = ParseLinks.parse(headers('link'));
                $scope.totalItems = headers('X-Total-Count');
                $scope.<%= entityInstancePlural %> = data;
                $scope.page = pagingParams.page;
            };
            var onError = function (error) {
                AlertService.error(error.data.message);
            };
            <%= entityClass %>.query({
                page: pagingParams.page - 1,
                size: paginationConstants.itemsPerPage,
                sort: [$scope.predicate + ',' + ($scope.reverse ? 'asc' : 'desc'), 'id']
            }, onSuccess, onError);
        };
        $scope.loadPage = function(page) {
            $scope.page = page;
            $scope.loadAll();
        };
        <%_ if (searchEngine == 'elasticsearch') { _%>

        $scope.search = function () {
            <%= entityClass %>Search.query({query: $scope.searchQuery}, function(result) {
                $scope.<%= entityInstancePlural %> = result;
            }, function(response) {
                if(response.status === 404) {
                    $scope.loadAll();
                }
            });
        };
        <%_ } _%>

        $scope.transition = function () {
            $state.transitionTo($state.$current, {
                page: $scope.page,
                sort: $scope.predicate + ',' + ($scope.reverse ? 'asc' : 'desc'),
                search: $scope.currentSearch
            });
        };

        $scope.loadAll();